name: 'Dioxus Build Action'
description: 'Build Dioxus applications with WASM support'
inputs:
  rust-version:
    description: 'Rust version to use'
    required: false
    default: 'stable'
  version:
    description: 'Dioxus CLI version to install (or branch/tag when using custom repo)'
    required: false
    default: 'latest'
  repo:
    description: 'GitHub repository to install Dioxus CLI from (format: owner/repo)'
    required: false
    default: 'dioxuslabs/dioxus'
  build-command:
    description: 'Custom build command (defaults to "dx build --release")'
    required: false
    default: 'dx build --release'
  working-directory:
    description: 'Directory containing the Dioxus project'
    required: false
    default: '.'
  cache:
    description: 'Whether to cache dependencies (true/false)'
    required: false
    default: 'true'
  platform:
    description: 'Target platform (web, ios, android, desktop, or all)'
    required: false
    default: 'web'
  features:
    description: 'Cargo features to enable (comma-separated)'
    required: false
    default: ''
  verbose:
    description: 'Enable verbose output (true/false)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ inputs.rust-version }}
        override: true
        target: wasm32-unknown-unknown

    - name: Cache Rust dependencies
      if: inputs.cache == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache Dioxus CLI
      if: inputs.cache == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/dx
        key: ${{ runner.os }}-dioxus-cli-${{ inputs.repo }}-${{ inputs.version }}

    - name: Install Dioxus CLI
      shell: bash
      run: |
        # Check if dx is already installed from cache
        if [ "${{ inputs.cache }}" = "true" ] && command -v dx &> /dev/null; then
          echo "Dioxus CLI found in cache"
        else
          if [ "${{ inputs.repo }}" = "dioxuslabs/dioxus" ]; then
            # Install from crates.io
            if [ "${{ inputs.version }}" = "latest" ]; then
              cargo install dioxus-cli
            else
              cargo install dioxus-cli --version ${{ inputs.version }}
            fi
          else
            # Install from GitHub repository
            REPO="${{ inputs.repo }}"
            VERSION="${{ inputs.version }}"
            
            if [ "$VERSION" = "latest" ]; then
              # Install from default branch
              cargo install --git "https://github.com/${REPO}" dioxus-cli
            elif [[ "$VERSION" == v* ]] || [[ "$VERSION" =~ ^[0-9] ]]; then
              # Looks like a version tag
              cargo install --git "https://github.com/${REPO}" dioxus-cli --tag "$VERSION"
            else
              # Treat as a branch name
              cargo install --git "https://github.com/${REPO}" dioxus-cli --branch "$VERSION"
            fi
          fi
        fi

    - name: Show Dioxus CLI Version
      if: inputs.verbose == 'true'
      shell: bash
      run: |
        echo "Dioxus CLI version:"
        dx --version

    - name: Install wasm-opt
      shell: bash
      run: |
        curl -L https://github.com/WebAssembly/binaryen/releases/download/version_111/binaryen-version_111-x86_64-linux.tar.gz | tar xz
        sudo cp binaryen-version_111/bin/wasm-opt /usr/local/bin/

    - name: Setup platform-specific targets
      shell: bash
      run: |
        PLATFORM="${{ inputs.platform }}"
        
        # Setup targets based on platform
        if [ "$PLATFORM" = "ios" ] || [ "$PLATFORM" = "all" ]; then
          echo "Setting up iOS targets"
          rustup target add aarch64-apple-ios
          rustup target add aarch64-apple-ios-sim
        fi
        
        if [ "$PLATFORM" = "android" ] || [ "$PLATFORM" = "all" ]; then
          echo "Setting up Android target"
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android
        fi
        
        if [ "$PLATFORM" = "web" ] || [ "$PLATFORM" = "all" ]; then
          echo "Web target already set up (wasm32-unknown-unknown)"
        fi

    # Build for the specified platform
    - name: Build Dioxus App
      shell: bash
      id: build
      working-directory: ${{ inputs.working-directory }}
      run: |
        PLATFORM="${{ inputs.platform }}"
        BUILD_CMD="${{ inputs.build-command }}"
        FEATURES="${{ inputs.features }}"
        
        # Create a temporary file to capture build output
        BUILD_OUTPUT_FILE=$(mktemp)
        
        if [ "$PLATFORM" = "web" ]; then
          $BUILD_CMD --platform web 2>&1 | tee $BUILD_OUTPUT_FILE
        elif [ "$PLATFORM" = "ios" ]; then
          $BUILD_CMD --platform ios 2>&1 | tee $BUILD_OUTPUT_FILE
        elif [ "$PLATFORM" = "android" ]; then
          $BUILD_CMD --platform android 2>&1 | tee $BUILD_OUTPUT_FILE
        elif [ "$PLATFORM" = "desktop" ]; then
          $BUILD_CMD --platform desktop 2>&1 | tee $BUILD_OUTPUT_FILE
        elif [ "$PLATFORM" = "all" ]; then
          # For "all", we'll just capture the last build output
          $BUILD_CMD --platform web 2>&1 | tee $BUILD_OUTPUT_FILE
          $BUILD_CMD --platform ios 2>&1 | tee $BUILD_OUTPUT_FILE
          $BUILD_CMD --platform android 2>&1 | tee $BUILD_OUTPUT_FILE
          $BUILD_CMD --platform desktop 2>&1 | tee $BUILD_OUTPUT_FILE
        else
          # Default behavior
          ${{ inputs.build-command }} 2>&1 | tee $BUILD_OUTPUT_FILE
        fi
        
        # Extract build output paths from the build output
        WEB_PATH=$(grep -o 'path="[^"]*"' $BUILD_OUTPUT_FILE | grep -i web | sed 's/path="//;s/"$//' | tail -1)
        IOS_PATH=$(grep -o 'path="[^"]*"' $BUILD_OUTPUT_FILE | grep -i ios | sed 's/path="//;s/"$//' | tail -1)
        ANDROID_PATH=$(grep -o 'path="[^"]*"' $BUILD_OUTPUT_FILE | grep -i android | sed 's/path="//;s/"$//' | tail -1)
        DESKTOP_PATH=$(grep -o 'path="[^"]*"' $BUILD_OUTPUT_FILE | grep -i desktop | sed 's/path="//;s/"$//' | tail -1)
        
        # If no specific platform paths found, try to get the generic path
        if [ -z "$WEB_PATH" ] && [ -z "$IOS_PATH" ] && [ -z "$ANDROID_PATH" ] && [ -z "$DESKTOP_PATH" ]; then
          GENERIC_PATH=$(grep -o 'path="[^"]*"' $BUILD_OUTPUT_FILE | sed 's/path="//;s/"$//' | tail -1)
        fi
        
        # Set outputs for use in the next step
        echo "web_path=$WEB_PATH" >> $GITHUB_OUTPUT
        echo "ios_path=$IOS_PATH" >> $GITHUB_OUTPUT
        echo "android_path=$ANDROID_PATH" >> $GITHUB_OUTPUT
        echo "desktop_path=$DESKTOP_PATH" >> $GITHUB_OUTPUT
        echo "generic_path=$GENERIC_PATH" >> $GITHUB_OUTPUT
        
        # Clean up
        rm $BUILD_OUTPUT_FILE

    - name: Show Build Output
      if: inputs.verbose == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Build output directory contents:"
        
        # Get paths from previous step
        WEB_PATH="${{ steps.build.outputs.web_path }}"
        IOS_PATH="${{ steps.build.outputs.ios_path }}"
        ANDROID_PATH="${{ steps.build.outputs.android_path }}"
        DESKTOP_PATH="${{ steps.build.outputs.desktop_path }}"
        GENERIC_PATH="${{ steps.build.outputs.generic_path }}"
        
        PLATFORM="${{ inputs.platform }}"
        
        if [ "$PLATFORM" = "web" ] || [ "$PLATFORM" = "all" ]; then
          if [ -n "$WEB_PATH" ] && [ -d "$WEB_PATH" ]; then
            echo "Web build output ($WEB_PATH):"
            ls -la "$WEB_PATH"
          elif [ -n "$GENERIC_PATH" ] && [ -d "$GENERIC_PATH" ]; then
            echo "Web build output ($GENERIC_PATH):"
            ls -la "$GENERIC_PATH"
          else
            echo "Web build output directory not found"
          fi
        fi
        
        if [ "$PLATFORM" = "desktop" ] || [ "$PLATFORM" = "all" ]; then
          if [ -n "$DESKTOP_PATH" ] && [ -d "$DESKTOP_PATH" ]; then
            echo "Desktop build output ($DESKTOP_PATH):"
            ls -la "$DESKTOP_PATH"
          else
            echo "Desktop build output directory not found"
          fi
        fi
        
        if [ "$PLATFORM" = "ios" ] || [ "$PLATFORM" = "all" ]; then
          if [ -n "$IOS_PATH" ] && [ -d "$IOS_PATH" ]; then
            echo "iOS build output ($IOS_PATH):"
            ls -la "$IOS_PATH"
          else
            echo "iOS build output directory not found"
          fi
        fi
        
        if [ "$PLATFORM" = "android" ] || [ "$PLATFORM" = "all" ]; then
          if [ -n "$ANDROID_PATH" ] && [ -d "$ANDROID_PATH" ]; then
            echo "Android build output ($ANDROID_PATH):"
            ls -la "$ANDROID_PATH"
          else
            echo "Android build output directory not found"
          fi
        fi
