name: 'Dioxus Build Action'
description: 'Build Dioxus applications with WASM support'
inputs:
  rust-version:
    description: 'Rust version to use'
    required: false
    default: 'stable'
  version:
    description: 'Dioxus CLI version to install (or branch/tag when using custom repo)'
    required: false
    default: 'latest'
  repo:
    description: 'GitHub repository to install Dioxus CLI from (format: owner/repo)'
    required: false
    default: 'dioxuslabs/dioxus'
  build-command:
    description: 'Custom build command (defaults to "dx build --release")'
    required: false
    default: 'dx build --release'
  working-directory:
    description: 'Directory containing the Dioxus project'
    required: false
    default: '.'
  cache:
    description: 'Whether to cache dependencies (true/false)'
    required: false
    default: 'true'
  platform:
    description: 'Target platform (web, ios, android, desktop, or all)'
    required: false
    default: 'web'
  features:
    description: 'Cargo features to enable (comma-separated)'
    required: false
    default: ''
  verbose:
    description: 'Enable verbose output (true/false)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ inputs.rust-version }}
        override: true
        target: wasm32-unknown-unknown

    - name: Cache Rust dependencies
      if: inputs.cache == 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache Dioxus CLI
      if: inputs.cache == 'true'
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/dx
        key: ${{ runner.os }}-dioxus-cli-${{ inputs.repo }}-${{ inputs.version }}

    - name: Install Dioxus CLI
      shell: bash
      run: |
        # Check if dx is already installed from cache
        if [ "${{ inputs.cache }}" = "true" ] && command -v dx &> /dev/null; then
          echo "Dioxus CLI found in cache"
        else
          if [ "${{ inputs.repo }}" = "dioxuslabs/dioxus" ]; then
            # Install from crates.io
            if [ "${{ inputs.version }}" = "latest" ]; then
              cargo install dioxus-cli
            else
              cargo install dioxus-cli --version ${{ inputs.version }}
            fi
          else
            # Install from GitHub repository
            REPO="${{ inputs.repo }}"
            VERSION="${{ inputs.version }}"
            
            if [ "$VERSION" = "latest" ]; then
              # Install from default branch
              cargo install --git "https://github.com/${REPO}" dioxus-cli
            elif [[ "$VERSION" == v* ]] || [[ "$VERSION" =~ ^[0-9] ]]; then
              # Looks like a version tag
              cargo install --git "https://github.com/${REPO}" dioxus-cli --tag "$VERSION"
            else
              # Treat as a branch name
              cargo install --git "https://github.com/${REPO}" dioxus-cli --branch "$VERSION"
            fi
          fi
        fi

    - name: Show Dioxus CLI Version
      if: ${{ inputs.verbose == 'true' }}
      shell: bash
      run: |
        echo "Dioxus CLI version:"
        dx --version

    - name: Install wasm-opt
      shell: bash
      run: |
        # install wasn-opt
        curl -L https://github.com/WebAssembly/binaryen/releases/download/version_111/binaryen-version_111-x86_64-linux.tar.gz | tar xz
        sudo cp binaryen-version_111/bin/wasm-opt /usr/local/bin/

    - name: Setup platform-specific targets
      shell: bash
      run: |
        # setup platform-specific target
        PLATFORM="${{ inputs.platform }}"
        
        # Setup targets based on platform
        if [ "$PLATFORM" = "ios" ] || [ "$PLATFORM" = "all" ]; then
          echo "Setting up iOS targets"
          rustup target add aarch64-apple-ios
          rustup target add aarch64-apple-ios-sim
        fi
        
        if [ "$PLATFORM" = "android" ] || [ "$PLATFORM" = "all" ]; then
          echo "Setting up Android target"
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android
        fi
        
        if [ "$PLATFORM" = "web" ] || [ "$PLATFORM" = "all" ]; then
          echo "Web target already set up (wasm32-unknown-unknown)"
        fi

    # Build for the specified platform
    - name: dx buid
      shell: bash
      id: build
      working-directory: ${{ inputs.working-directory }}
      run: |
        # dx build
        PLATFORM="${{ inputs.platform }}"
        BUILD_CMD="${{ inputs.build-command }}"
        FEATURES="${{ inputs.features }}"

        # Append features to the build command if provided
        if [ -n "$FEATURES" ]; then
          BUILD_CMD="$BUILD_CMD --features $FEATURES"
        fi

        if [ "$PLATFORM" = "web" ]; then
          $BUILD_CMD --platform web
        elif [ "$PLATFORM" = "ios" ]; then
          $BUILD_CMD --platform ios
        elif [ "$PLATFORM" = "android" ]; then
          $BUILD_CMD --platform android
        elif [ "$PLATFORM" = "desktop" ]; then
          $BUILD_CMD --platform desktop
        elif [ "$PLATFORM" = "all" ]; then
          # For "all", we'll just capture the last build output
          $BUILD_CMD --platform web
          $BUILD_CMD --platform ios
          $BUILD_CMD --platform android
          $BUILD_CMD --platform desktop
        else
          # Default behavior
          ${{ inputs.build-command }}
        fi
